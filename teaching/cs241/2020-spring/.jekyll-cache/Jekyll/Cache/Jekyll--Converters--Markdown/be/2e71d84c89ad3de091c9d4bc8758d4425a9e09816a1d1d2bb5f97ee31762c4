I"æ<h1 id="lecture-30--nov-20th-2019">Lecture 30 ‚Äì Nov 20th, 2019</h1>

<h2 id="setup">Setup</h2>
<ol>
  <li>Log in to clyde.</li>
  <li>Copy <code class="highlighter-rouge">~steve/ex/dynamiclib</code> to your home directory.</li>
</ol>

<h2 id="task">Task</h2>
<ol>
  <li>
    <p>We‚Äôre going to build a dynamic library <code class="highlighter-rouge">libgreeting</code> and an application to
link to it (and also do some bug fixes).</p>

    <p>Start by reading the library source which consists of just a single <code class="highlighter-rouge">.c</code>
file in <code class="highlighter-rouge">libgreeting</code> and a header file in <code class="highlighter-rouge">libgreeting/include/greeting</code>.
(We‚Äôll fix the typo later.)</p>
  </li>
  <li>Compile <code class="highlighter-rouge">hello.c</code>. To do this, we‚Äôre going to need to tell the compiler to
compile it as position independent code and we also need to tell the
compiler where the header files are (it‚Äôs common to separate out the header
files which will be installed from source files).
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -Wall -std=c11 -fPIC -Iinclude -c -o hello.o hello.c
</code></pre></div>    </div>
  </li>
  <li>Next, we need to build our library. Since this is the first version of our
library, we‚Äôre going to use an ABI version of 1.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -fPIC -shared -Wl,-soname=libgreeting.so.1 -o libgreeting.so.1.0.0 hello.o
</code></pre></div>    </div>
  </li>
  <li>Step 3 should have created the file <code class="highlighter-rouge">libgreeting.so.1.0.0</code>. If you run <code class="highlighter-rouge">$
file libgreeting.so.1.0.0</code> it should tell you that it‚Äôs a shared object
(along with some other interesting things). If you run <code class="highlighter-rouge">$ nm
libgreeting.so.1.0.0 | grep hello</code> you can see where our <code class="highlighter-rouge">hello()</code> function
is defined in the library.</li>
  <li>
    <p>Next, we‚Äôre going to ‚Äúinstall‚Äù the library and its header files for our
program to use.</p>

    <p>Copy <code class="highlighter-rouge">libgreeting/libgreeting.so.1.0.0</code> into the <code class="highlighter-rouge">lib</code> directory.</p>

    <p>Copy <code class="highlighter-rouge">libgreeting/include/greeting</code> into the <code class="highlighter-rouge">include</code> directory.</p>

    <p>Inside <code class="highlighter-rouge">lib</code>, we need to make two symlinks.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ln -s libgreeting.so.1.0.0 libgreeting.so
$ ln -s libgreeting.so.1.0.0 libgreeting.so.1
</code></pre></div>    </div>
  </li>
  <li>
    <p>Our library is installed, so it‚Äôs time to build our application which is in
the <code class="highlighter-rouge">src</code> directory.</p>

    <p>The first step is to compile the source files to object files (this could
be omitted, especially since it‚Äôs just a single file for the program, but
we‚Äôre going to do it here).</p>

    <p>We need to tell <code class="highlighter-rouge">clang</code> where to find the header files.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -Wall -std=c11 -I../include -c -o main.o main.c
</code></pre></div>    </div>
  </li>
  <li>Now we want to link our application together. We need to inform <code class="highlighter-rouge">clang</code>
which library we want (namely <code class="highlighter-rouge">libgreeting.so</code>) and in which directory to
look for it.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -L../lib -o prog main.o -lgreeting
</code></pre></div>    </div>
  </li>
  <li>Great, now let‚Äôs run the program: <code class="highlighter-rouge">$./prog</code>.</li>
  <li>Well that didn‚Äôt work. The problem is the dynamic linker doesn‚Äôt know to
look in that directory. We can tell it where to look by using an
environment variable.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ LD_LIBRARY_PATH=../lib ./prog
</code></pre></div>    </div>
  </li>
  <li>Using <code class="highlighter-rouge">LD_LIBRARY_PATH</code> isn‚Äôt great (you can search the Internet for the
downsides). Instead, let‚Äôs tell the linker to include a runtime path in
the binary. This will instruct the linker to check that path for
libraries.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -L../lib -Wl,-rpath='$ORIGIN/../lib' -o prog main.o -lgreeting
</code></pre></div>    </div>
  </li>
  <li>Now when we run the program normally, it will do the right thing as long
as the path to the library from the directory of the binary is <code class="highlighter-rouge">../lib</code>.
Let‚Äôs ‚Äúinstall‚Äù the binary into the <code class="highlighter-rouge">bin</code> directory. (Just move or copy it
there.)</li>
  <li>Let‚Äôs fix the typo in the library. Edit the library source and fix
‚Äúlirbary.‚Äù</li>
  <li>
    <p>Build a new version of the library. Make sure you rebuild the object file!</p>

    <p>Since this version is compatible with
the existing version, use the same soname of <code class="highlighter-rouge">libgreeting.so.1</code> but change
the output file to <code class="highlighter-rouge">libgreeting.so.1.0.1</code>.</p>
  </li>
  <li>‚ÄúInstall‚Äù <code class="highlighter-rouge">libgreeting.so.1.0.1</code> in the <code class="highlighter-rouge">lib</code> directory and change the
symlinks to point to the new version. You can leave the old version in
place or remove it as you desire.</li>
  <li>
    <p>Run the program which should still be in <code class="highlighter-rouge">bin</code>: <code class="highlighter-rouge">$ bin/prog</code>.</p>

    <p>If all has gone well, then without needing any changes to the binary, it
should be using the new version of the dynamic library.</p>
  </li>
  <li>Rerun the command from step 10 to build the program, but this time run it
under <code class="highlighter-rouge">strace</code>.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ strace -o syscalls -f -e openat clang -L../lib -Wl,-rpath='$ORIGIN/../lib' -o prog main.o -lgreeting
</code></pre></div>    </div>
    <p>This will write the trace to the <code class="highlighter-rouge">syscalls</code> file, trace the children of
<code class="highlighter-rouge">clang</code> (because <code class="highlighter-rouge">clang</code> will be invoking the linker), and only trace the
<code class="highlighter-rouge">openat</code> system call.</p>

    <p>Open <code class="highlighter-rouge">syscalls</code> up in an editor and search for <code class="highlighter-rouge">greeting</code>. Which file did
it open?</p>
  </li>
  <li>Run <code class="highlighter-rouge">prog</code> under <code class="highlighter-rouge">strace</code>.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ strace -e openat ./prog
</code></pre></div>    </div>
    <p>Which of the <code class="highlighter-rouge">libgreeting.so</code> files did it open? How did it know to open
that one when the one opened by the linker in the previous step was
different?</p>
  </li>
</ol>
:ET
I",<h1 id="lecture-9--feb-21st-2020">Lecture 9 – Feb 21st, 2020</h1>

<h2 id="setup">Setup</h2>
<ol>
  <li>Log in to clyde.</li>
  <li>Create a directory and <code class="highlighter-rouge">cd</code> into it.</li>
  <li>Copy <code class="highlighter-rouge">~steve/ex/size.c</code> to your directory.</li>
</ol>

<h2 id="task">Task</h2>
<ol>
  <li>Open <code class="highlighter-rouge">size.c</code> in your editor and read it. Try to guess what it will print
out. Compile the code and run it.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang -Wall -std=c11 -o size size.c
$ ./size
</code></pre></div>    </div>
    <p>Did it print what you expected?</p>
  </li>
  <li>Modify <code class="highlighter-rouge">size.c</code> and add additional <code class="highlighter-rouge">printf</code> lines to print the sizes of
<code class="highlighter-rouge">short</code>, <code class="highlighter-rouge">int</code>, <code class="highlighter-rouge">long</code>, <code class="highlighter-rouge">long long</code>, <code class="highlighter-rouge">float</code>, <code class="highlighter-rouge">double</code>, and <code class="highlighter-rouge">size_t</code>.
Compile your program and run it.</li>
  <li>
    <p>Modify <code class="highlighter-rouge">size.c</code> one more time. This time, print the size of <code class="highlighter-rouge">bool</code>. Try to
compile the code. Clang gives two errors, the second is nonsensical, but
the first is instructive. Try to compile with <code class="highlighter-rouge">gcc</code> instead of <code class="highlighter-rouge">clang</code>.
You’ll get a very similar error.</p>

    <p>Look closely at the error messages, they tell you a lot. They start by
giving the name of the file, the line of the error, and the column of the
error: <code class="highlighter-rouge">size.c:line:column:</code>. This is followed by the error message and
then the line of code with a marker indicating the place the compiler
thinks you’ve made an error.</p>

    <p>(You can have Vim show you line numbers by adding <code class="highlighter-rouge">set number</code> to your
<code class="highlighter-rouge">~/.vimrc</code> or by running <code class="highlighter-rouge">:set number</code> while Vim is running. You can
have Emacs <a href="https://www.emacswiki.org/emacs/LineNumbers">display line
numbers</a> too.)</p>

    <p>This particular error is because C calls its Boolean type <code class="highlighter-rouge">_Bool</code>. This is
terrible. Fortunately, there’s a better way.</p>
  </li>
  <li>
    <p>Add the line <code class="highlighter-rouge">#include &lt;stdbool.h&gt;</code> at the top of <code class="highlighter-rouge">size.c</code>. This makes
<code class="highlighter-rouge">bool</code> an alias (technically a <code class="highlighter-rouge">typedef</code>) of <code class="highlighter-rouge">_Bool</code> and defines <code class="highlighter-rouge">true</code> as
1 and <code class="highlighter-rouge">false</code> as 0. Compile and run it.</p>

    <p>(If you’d like, you can read <code class="highlighter-rouge">/usr/include/clang/6.0/include/stdbool.h</code> to
see how that happens, but note we haven’t actually asked about most of
what’s in there. Nevertheless, it should be fairly easy to follow what’s
going on.)</p>
  </li>
  <li>Run
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ clang-format -i size.c
</code></pre></div>    </div>
    <p>to make sure your code is consistently formatted.</p>
  </li>
  <li>
    <p>Create a new file, <code class="highlighter-rouge">fib.c</code>. Write a function <code class="highlighter-rouge">long long
fib(int n)</code> that computes and returns the nth <a href="https://en.wikipedia.org/wiki/Fibonacci_number#Sequence_properties">Fibonacci
number</a>.
(Feel free to use either recursion or a loop. Make sure that any temporary
variables you use have type <code class="highlighter-rouge">long long</code>.)</p>

    <p>Below it, create a main function that calls <code class="highlighter-rouge">fib</code> with the argument of your
choice and prints out the result, e.g.,</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">int</span> <span class="n">n</span> <span class="o">=</span> <span class="mi">19</span><span class="p">;</span>
<span class="n">printf</span><span class="p">(</span><span class="s">"F_%d = %lld</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">n</span><span class="p">,</span> <span class="n">fib</span><span class="p">(</span><span class="n">n</span><span class="p">));</span>
</code></pre></div>    </div>

    <p>Format your code with <code class="highlighter-rouge">clang-format</code>, compile and run it. Make sure you get
the right answer!</p>
  </li>
  <li>
    <p>Read the man page for <code class="highlighter-rouge">atoi</code>. This function takes a string and returns an
integer. Modify <code class="highlighter-rouge">fib.c</code> to iterate over all of the command line parameters
(excluding <code class="highlighter-rouge">argv[0]</code> which is the name of the program itself), call
<code class="highlighter-rouge">atoi(argv[idx])</code> for each 1 ≤ <code class="highlighter-rouge">idx</code> &lt; <code class="highlighter-rouge">argc</code>, and print out the result.</p>

    <p>Pay attention to which header file you need to include in order to use
<code class="highlighter-rouge">atoi</code> and make sure to <code class="highlighter-rouge">#include</code> it.</p>

    <p>Format, compile, and test.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./fib 0 19 12
F_0 = 0
F_19 = 4181
F_12 = 144
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modify <code class="highlighter-rouge">fib.c</code> such that if any of the arguments are negative, it prints
out an error message rather than the value of the Fibonacci number. If any
of the arguments are negative, make <code class="highlighter-rouge">main</code> return 1 to indicate error.</p>

    <p>Recall that error messages should go to <code class="highlighter-rouge">stderr</code> rather than <code class="highlighter-rouge">stdout</code>. We can
use <code class="highlighter-rouge">fprintf</code> to print to the <code class="highlighter-rouge">stderr</code> file.</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fprintf</span><span class="p">(</span><span class="n">stderr</span><span class="p">,</span> <span class="s">"%s: Error: negative number: %s</span><span class="se">\n</span><span class="s">"</span><span class="p">,</span> <span class="n">argv</span><span class="p">[</span><span class="mi">0</span><span class="p">],</span> <span class="n">argv</span><span class="p">[</span><span class="n">idx</span><span class="p">]);</span>
</code></pre></div>    </div>

    <p>Example output.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ./fib 2 -3 6
F_2 = 1
./fib: Error: negative number: -3
F_6 = 8
$ echo $?
1
</code></pre></div>    </div>
  </li>
</ol>
:ET
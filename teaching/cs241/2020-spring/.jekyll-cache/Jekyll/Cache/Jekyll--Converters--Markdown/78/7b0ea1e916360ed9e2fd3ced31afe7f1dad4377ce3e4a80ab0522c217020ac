I":<h1 id="lecture-11--feb-26th-2020">Lecture 11 – Feb 26th, 2020</h1>

<h2 id="setup">Setup</h2>
<ol>
  <li>Log in to clyde.</li>
  <li>Create a directory and <code class="highlighter-rouge">cd</code> into it.</li>
  <li>Copy <code class="highlighter-rouge">~steve/ex/mc_pi.c</code>, <code class="highlighter-rouge">~steve/ex/logger.h</code>, <code class="highlighter-rouge">~steve/ex/logger.c</code>,
<code class="highlighter-rouge">~steve/ex/rand.h</code> and <code class="highlighter-rouge">~steve/ex/rand.c</code> into the directory.</li>
</ol>

<h2 id="task">Task</h2>
<ol>
  <li>
    <p>Based on the example Makefile in the
<a href="../slides/Lecture-11-Make-and-Compiling.pdf">slides</a>, create a <code class="highlighter-rouge">Makefile</code>
to compile the program <code class="highlighter-rouge">mc_pi</code>. Make sure you look through each <code class="highlighter-rouge">.c</code> file
to see which <code class="highlighter-rouge">.h</code> files it includes so you can set up the prerequisites
correctly.</p>

    <p>If you have put <code class="highlighter-rouge">-std=c11</code> in the <code class="highlighter-rouge">CFLAGS</code> variable (and you should),
you’ll get an error and a warning like this.</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mc_pi.c:49:18: warning: implicit declaration of function 'getopt' is invalid in C99 [-Wimplicit-function-declaration]
  while ((flag = getopt(argc, argv, "hn:v")) != -1) {
                 ^
mc_pi.c:52:21: error: use of undeclared identifier 'optarg'
      trials = atoi(optarg);
                    ^
1 warning and 1 error generated.
</code></pre></div>    </div>
    <p>To fix that, add <code class="highlighter-rouge">-D_POSIX_C_SOURCE=200809L</code> to <code class="highlighter-rouge">CFLAGS</code>.</p>

    <p>When you run <code class="highlighter-rouge">$ make</code>, it should build three object files (those ending in
<code class="highlighter-rouge">.o</code>) and the program <code class="highlighter-rouge">mc_pi</code>.</p>
  </li>
  <li>Run <code class="highlighter-rouge">$ ./mc_pi</code> a few times to see what it does. Run <code class="highlighter-rouge">$ ./mc_pi -h</code> to get
the help. Run <code class="highlighter-rouge">mc_pi</code> again but change the number of trials. Try small
values and large values. Try nonsensical values (or no value at all).</li>
  <li>
    <p>The <code class="highlighter-rouge">touch</code> command can be used to change the time stamp on a file without
changing any of its contents. We can use this to test the <code class="highlighter-rouge">Makefile</code>.</p>

    <p>First, run <code class="highlighter-rouge">$ make</code> again. If you haven’t changed any files, <code class="highlighter-rouge">make</code> should
say it has nothing to do. Next, run <code class="highlighter-rouge">$ touch logger.c</code> and then rerun
<code class="highlighter-rouge">make</code>. If everything worked correctly with your <code class="highlighter-rouge">Makefile</code>, <code class="highlighter-rouge">logger.o</code> and
<code class="highlighter-rouge">mc_pi</code> should be remade but nothing else.</p>
  </li>
  <li>Run <code class="highlighter-rouge">touch</code> on <code class="highlighter-rouge">rand.h</code> and rerun <code class="highlighter-rouge">make</code>. Did it rebuild the right files?</li>
  <li>
    <p>If you didn’t do so in step 1, add phony <code class="highlighter-rouge">all</code> and <code class="highlighter-rouge">clean</code> targets. <code class="highlighter-rouge">all</code>
should depend on <code class="highlighter-rouge">mc_pi</code> and have no recipe. <code class="highlighter-rouge">clean</code> shouldn’t depend on
anything but should remove <code class="highlighter-rouge">mc_pi</code> and the object files. Make sure you
don’t delete your source files!</p>

    <p>Remember, <code class="highlighter-rouge">all</code> should be the first target in the <code class="highlighter-rouge">Makefile</code>. Running <code class="highlighter-rouge">$
make</code> and <code class="highlighter-rouge">$ make all</code> should have the same effect. Test that <code class="highlighter-rouge">$ make
clean</code> performs the correct action.</p>

    <p>Recall that to make a phony target, you add it as a prerequisite to the
<code class="highlighter-rouge">.PHONY</code> so you should have the line</p>
    <div class="language-make highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nl">.PHONY</span><span class="o">:</span> <span class="nf">all clean</span>
</code></pre></div>    </div>
  </li>
  <li>Remove <code class="highlighter-rouge">clean</code> from the <code class="highlighter-rouge">.PHONY: all clean</code> line of the <code class="highlighter-rouge">Makefile</code>. Run <code class="highlighter-rouge">$
touch clean</code>. This will create an empty file named <code class="highlighter-rouge">clean</code>. Run <code class="highlighter-rouge">$ make
clean</code> and note what happens.</li>
  <li>Readd <code class="highlighter-rouge">clean</code> to <code class="highlighter-rouge">.PHONY:</code> and run <code class="highlighter-rouge">$ make clean</code> again. It should perform
the clean action even though the <code class="highlighter-rouge">clean</code> file is present. Remove the
<code class="highlighter-rouge">clean</code> file.</li>
  <li>
    <p>Add logging to <code class="highlighter-rouge">rand.c</code> to log (with <code class="highlighter-rouge">LOG_LEVEL_INFO</code> each random value
that is produced. <code class="highlighter-rouge">log_message</code> takes a variable number of arguments where
the first one is the log level, the second is a printf-style format string,
and the remaining are the arguments to print according to the format
string’s conversion specifiers. You can use <code class="highlighter-rouge">%f</code> to print out the double.</p>

    <p>Make sure you include the appropriate header <em>and</em> update the dependencies
in your <code class="highlighter-rouge">Makefile</code>.</p>
  </li>
  <li>Run <code class="highlighter-rouge">mc_pi</code> with the <code class="highlighter-rouge">-v</code> argument. You might want to have just a few
trials to avoid spamming your terminal with a few hundred random values.
You can also redirect the messages to a file using <code class="highlighter-rouge">$ ./mc_pi -v -n 1000
2&gt;generated_files</code>.</li>
</ol>
:ET
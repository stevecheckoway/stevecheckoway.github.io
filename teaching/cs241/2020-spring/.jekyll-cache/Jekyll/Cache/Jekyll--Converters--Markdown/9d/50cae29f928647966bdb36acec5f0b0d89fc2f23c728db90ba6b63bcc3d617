I"Å<h1 id="lecture-33--dec-2nd-2019">Lecture 33 â€“ Dec 2nd, 2019</h1>

<h2 id="setup">Setup</h2>
<ol>
  <li>Log in to clyde.</li>
  <li>Create a new directory.</li>
</ol>

<h2 id="task">Task</h2>
<ol>
  <li>Write a short program containing a function with the prototype
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">double</span> <span class="n">varsum</span><span class="p">(</span><span class="kt">int</span> <span class="n">num</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div>    </div>
    <p>where the <code class="highlighter-rouge">num</code> parameter controls how many additional <code class="highlighter-rouge">double</code> parameters
there are. <code class="highlighter-rouge">varsum</code> should add up all of the double parameters and return
the result. If <code class="highlighter-rouge">num &lt;= 0</code>, return <code class="highlighter-rouge">0.0</code>.</p>
  </li>
  <li>
    <p>The <code class="highlighter-rouge">printf</code> family of functions includes (among others) <code class="highlighter-rouge">printf(3)</code>,
<code class="highlighter-rouge">fprintf(3)</code>, <code class="highlighter-rouge">vprintf(3)</code>, and <code class="highlighter-rouge">vfprintf(3)</code>. The first three can easily
be written in terms of the fourth.</p>

    <p>Write four similar functions</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">void</span> <span class="nf">msg</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
<span class="kt">void</span> <span class="nf">vmsg</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">);</span>
<span class="kt">void</span> <span class="nf">fmsg</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="p">...);</span>
<span class="kt">void</span> <span class="nf">vfmsg</span><span class="p">(</span><span class="kt">FILE</span> <span class="o">*</span><span class="n">fp</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">type</span><span class="p">,</span> <span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">fmt</span><span class="p">,</span> <span class="kt">va_list</span> <span class="n">ap</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>where the intended behavior is</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">msg</span><span class="p">(</span><span class="s">"Info"</span><span class="p">,</span> <span class="s">"0x%x %d"</span><span class="p">,</span> <span class="mi">32</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>prints <code class="highlighter-rouge">[Info] 0x20 5</code>.</p>

    <p>Implement the first three in terms of the fourth. Feel free to use
<code class="highlighter-rouge">fprintf(3)</code>, <code class="highlighter-rouge">vfprintf(3)</code>, or other standard I/O functions to implement
<code class="highlighter-rouge">vfmsg</code>.</p>

    <p>Write a short program that tests them.</p>
  </li>
  <li>
    <p>The <code class="highlighter-rouge">execl(3)</code> function takes a path and a variable number of arguments.
The end of the argument list is denoted by an explicit <code class="highlighter-rouge">(char *)0</code>.</p>

    <p>Using the same strategy of marking the end of the list with <code class="highlighter-rouge">(char *)0</code>,
write a function</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kt">char</span> <span class="o">*</span><span class="n">join</span><span class="p">(</span><span class="kt">char</span> <span class="k">const</span> <span class="o">*</span><span class="n">sep</span><span class="p">,</span> <span class="p">...)</span>
</code></pre></div>    </div>
    <p>That allocates and returns a string consisting of the variable number of
strings joined together but separated the string <code class="highlighter-rouge">sep</code>. For example,</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">join</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">"This"</span><span class="p">,</span> <span class="s">"is"</span><span class="p">,</span> <span class="s">"a"</span><span class="p">,</span> <span class="s">"sentence."</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span><span class="err">`</span>
</code></pre></div>    </div>
    <p>should return the string <code class="highlighter-rouge">"This is a sentence."</code>;</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">join</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>should return the empty string <code class="highlighter-rouge">""</code>; and</p>
    <div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">join</span><span class="p">(</span><span class="s">"+-+"</span> <span class="s">"a"</span><span class="p">,</span> <span class="s">"b"</span><span class="p">,</span> <span class="s">"c"</span><span class="p">,</span> <span class="p">(</span><span class="kt">char</span> <span class="o">*</span><span class="p">)</span><span class="mi">0</span><span class="p">);</span>
</code></pre></div>    </div>
    <p>should return the string <code class="highlighter-rouge">"a+-+b+-+c"</code>.</p>

    <p>In all cases, the string should be allocated via <code class="highlighter-rouge">malloc(3)</code> or
<code class="highlighter-rouge">realloc(3)</code>. Make sure you donâ€™t leak memory.</p>

    <p>Write a short program to test your functions. The strings returned from
<code class="highlighter-rouge">join</code> should ultimately be passed to <code class="highlighter-rouge">free(3)</code>.</p>
  </li>
</ol>
:ET
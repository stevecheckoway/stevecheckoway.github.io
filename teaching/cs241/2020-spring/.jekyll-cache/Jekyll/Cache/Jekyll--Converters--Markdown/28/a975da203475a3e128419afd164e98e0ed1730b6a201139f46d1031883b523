I"x<h1 id="lecture-5--feb-12th-2020">Lecture 5 – Feb 12th, 2020</h1>

<h2 id="setup">Setup</h2>
<ol>
  <li>Create an account on <a href="https://github.com">GitHub</a> using your Oberlin email
address if you don’t already have one. If you already have an account, you
can add your Oberlin email address on the appropriate
<a href="https://github.com/settings/emails">settings page</a>.</li>
  <li>Log in to GitHub and then visit <a href="https://classroom.github.com/a/YD14LQQZ">this
page</a> and click the <code class="highlighter-rouge">Accept this
assignment</code> button.</li>
  <li>After a few seconds, the repository will be ready, click the
<code class="highlighter-rouge">https://github.com/systems-programming/playground-username</code> link that appears
(it won’t be literally <code class="highlighter-rouge">playground-username</code>, it will have your GitHub
username.</li>
  <li>Log in to clyde.</li>
  <li>Run the following commands, but substitute your name, email address, and
editor of choice in the appropriate spots
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.name 'YOUR NAME HERE'
$ git config --global user.email 'YOUR.EMAIL@oberlin.edu'
$ git config --global core.editor 'YOUR EDITOR'
</code></pre></div>    </div>
  </li>
</ol>

<h2 id="task">Task</h2>
<ol>
  <li>Under “Quick setup” on the GitHub page you opened in step 3 of the Setup,
click the <code class="highlighter-rouge">HTTPS</code> button and copy the URL to the right of it. Run
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git clone https://github.com/systems-programming...
</code></pre></div>    </div>
    <p>where you replace <code class="highlighter-rouge">https://github.com/systems-programming/...</code> with the
actual URL you copied.</p>
  </li>
  <li><code class="highlighter-rouge">cd</code> into the directory <code class="highlighter-rouge">git clone</code> just created. There are no files there
yet, so open your editor of choice and create a <code class="highlighter-rouge">README</code> file. It’s
traditional to include information about what the project is, how to
build/install it, and examples of usage. In this case, the project is
called <code class="highlighter-rouge">Playground</code>. Mine contained these contents.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Playground
    
Information about what playground does here.
    
Usage examples
    
Build instructions
</code></pre></div>    </div>
  </li>
  <li>Use <code class="highlighter-rouge">$ git add README</code> to add <code class="highlighter-rouge">README</code> to the staging area.</li>
  <li>Use <code class="highlighter-rouge">$ git commit</code> to commit it. This will open the editor you configured
above. Enter a commit message. The first line should be a short summary.
Then add a blank line, and starting on the third line, you can give a more
detailed explanation of what you’re committing. Write your commit message,
save the file, and exit the editor. If all has gone well, your file will be
committed.</li>
  <li>Use <code class="highlighter-rouge">$ git push</code> to push the new commit to GitHub. You’ll need to enter
your GitHub username and password.</li>
  <li>Reload the GitHub page in your browser from step 1. You should see your
<code class="highlighter-rouge">README</code> in the repository and GitHub will display the text in the page below
the file listing.</li>
  <li>That README is okay, but it’s kinda boring. It’s just plain text. Let’s
replace it with one we can write in
<a href="https://guides.github.com/features/mastering-markdown/">Markdown</a>. Use
<code class="highlighter-rouge">git mv</code> to rename <code class="highlighter-rouge">README</code> to <code class="highlighter-rouge">README.md</code>.</li>
  <li>Edit <code class="highlighter-rouge">README.md</code>. You can read more about Markdown later. For now, use
lines starting with <code class="highlighter-rouge">#</code> to make section headings.
    <div class="language-markdown highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="gh"># Playground</span>
    
Information about what playground does here.
    
<span class="gh"># Usage examples</span>
    
<span class="gh"># Build instructions</span>
</code></pre></div>    </div>
  </li>
  <li>Run <code class="highlighter-rouge">$ git status</code> to see some information about the files in the repo. You
should see under “Changes to be committed” that the file was renamed and
under “Changes not staged for commit” that the file was edited.</li>
  <li>To see what would be committed if you were to run <code class="highlighter-rouge">$ git commit</code> right
now, run <code class="highlighter-rouge">$ git diff --cached</code>. This is the difference between what’s in
the repo and what has been staged by the <code class="highlighter-rouge">git mv</code> earlier.</li>
  <li>To see the difference between what is in your working directory and what
has been staged, run <code class="highlighter-rouge">$ git diff</code> (without the <code class="highlighter-rouge">--cached</code>). Lines in red
(starting with <code class="highlighter-rouge">-</code>) will be deleted. Lines in green (starting with <code class="highlighter-rouge">+</code>)
will be added.</li>
  <li>Stage your changes by running <code class="highlighter-rouge">$ git add README.md</code>.</li>
  <li>Run <code class="highlighter-rouge">$ git status</code>, <code class="highlighter-rouge">$git diff --cached</code>, and <code class="highlighter-rouge">$ git diff</code> to see what
changed from before the <code class="highlighter-rouge">git add</code>.</li>
  <li>Commit the changes with an appropriate commit message.</li>
  <li>Reload the GitHub page for the repository. You’ll see nothing has changed.
Why not? What step did we forget? Perform that step.</li>
  <li>Reload the page again after performing the missing step.</li>
  <li>Try creating and adding new files and directories. Commit them. Modify
some files, commit your changes. View your changes using <code class="highlighter-rouge">$ git log</code></li>
  <li>Just for fun, read Steve Losh’s <a href="http://stevelosh.com/blog/2013/04/git-koans/">Git Koans</a>.</li>
</ol>

<h2 id="make-life-easier">Make life easier</h2>
<p>Entering your username and password every time you push or pull from GitHub is
<em>terrible</em>. You definitely don’t want to have to do that every time. There are
two options to make life more pleasant for you.</p>

<p>The first is to use the “git credential helper” to securely store your
credentials. See this StackOverflow
<a href="https://stackoverflow.com/a/51505417">answer</a> for some details.</p>

<p>The <a href="https://help.github.com/en/articles/connecting-to-github-with-ssh">second
method</a> is
to give GitHub your SSH key. This is the method I usually use. Note that the
instructions for generating an SSH key say to use</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
</code></pre></div></div>
<p>but I would suggest the following instead.</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ ssh-keygen -t ed25519 -C "your.email@oberlin.edu"
</code></pre></div></div>
<p>Note that the key pair you generate this way will be called <code class="highlighter-rouge">id_ed25519</code> and
<code class="highlighter-rouge">id_ed25519.pub</code> instead of <code class="highlighter-rouge">id_rsa</code> and <code class="highlighter-rouge">id_rsa.pub</code>. The only real advantage
here is that Ed25519 is much faster than RSA.</p>

<p>If you use the second method, the URI you want to copy for cloning will be
<code class="highlighter-rouge">git@github.com:systems-programming/...</code> rather than
<code class="highlighter-rouge">https://github.com/systems-programming/...</code>.</p>
:ET